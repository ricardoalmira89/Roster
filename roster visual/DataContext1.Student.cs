//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 21/08/2014 14:14:35
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace roster_visual
{

    /// <summary>
    /// There are no comments for roster_visual.Student in the schema.
    /// </summary>
    [Table(Name = @"roster_mysql.student")]
    public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _LastName;

        private string _FirstName;

        private string _Email;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private string _HomePhone;

        private string _BussinessPhone;

        private string _CellPhone;

        private string _FaxNumber;

        private string _Address;

        private string _City;

        private string _State;

        private string _ZIP;

        private string _Country;

        private string _CreditTrans;

        private string _Refered;

        private string _WebPage;

        private string _Notes;

        private string _Attachment;

        private string _Location;

        private string _Status;

        private string _Comments;

        private string _EmergencyContactName;

        private string _EmergencyContactPhone1;

        private string _EmergencyContactPhone2;

        private string _EmergencyContactPhone3;

        private string _Cv;

        private System.Nullable<bool> _Cvs;

        private string _MiddleInitial;

        private string _Picture;

        private System.Nullable<int> _GraduatedId;

        private string _PaymentInfo;

        private string _PaymentPlanAmount;

        private System.Nullable<int> _DropinfoId;

        private System.Nullable<int> _EOId;

        private System.Nullable<int> _LockerId;
        #pragma warning restore 0649

        private EntityRef<Locker> _Locker;

        private EntityRef<EnrollmentOfficer> _EnrollmentOfficer;

        private EntityRef<Graduated> _Graduated;

        private EntityRef<DropInfo> _DropInfo;

        private EntitySet<StudentSchedule> _StudentSchedules;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnStartDateChanging(System.DateTime value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime value);
        partial void OnEndDateChanged();
        partial void OnHomePhoneChanging(string value);
        partial void OnHomePhoneChanged();
        partial void OnBussinessPhoneChanging(string value);
        partial void OnBussinessPhoneChanged();
        partial void OnCellPhoneChanging(string value);
        partial void OnCellPhoneChanged();
        partial void OnFaxNumberChanging(string value);
        partial void OnFaxNumberChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnZIPChanging(string value);
        partial void OnZIPChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnCreditTransChanging(string value);
        partial void OnCreditTransChanged();
        partial void OnReferedChanging(string value);
        partial void OnReferedChanged();
        partial void OnWebPageChanging(string value);
        partial void OnWebPageChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnAttachmentChanging(string value);
        partial void OnAttachmentChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCommentsChanging(string value);
        partial void OnCommentsChanged();
        partial void OnEmergencyContactNameChanging(string value);
        partial void OnEmergencyContactNameChanged();
        partial void OnEmergencyContactPhone1Changing(string value);
        partial void OnEmergencyContactPhone1Changed();
        partial void OnEmergencyContactPhone2Changing(string value);
        partial void OnEmergencyContactPhone2Changed();
        partial void OnEmergencyContactPhone3Changing(string value);
        partial void OnEmergencyContactPhone3Changed();
        partial void OnCvChanging(string value);
        partial void OnCvChanged();
        partial void OnCvsChanging(System.Nullable<bool> value);
        partial void OnCvsChanged();
        partial void OnMiddleInitialChanging(string value);
        partial void OnMiddleInitialChanged();
        partial void OnPictureChanging(string value);
        partial void OnPictureChanged();
        partial void OnGraduatedIdChanging(System.Nullable<int> value);
        partial void OnGraduatedIdChanged();
        partial void OnPaymentInfoChanging(string value);
        partial void OnPaymentInfoChanged();
        partial void OnPaymentPlanAmountChanging(string value);
        partial void OnPaymentPlanAmountChanged();
        partial void OnDropinfoIdChanging(System.Nullable<int> value);
        partial void OnDropinfoIdChanged();
        partial void OnEOIdChanging(System.Nullable<int> value);
        partial void OnEOIdChanged();
        partial void OnLockerIdChanging(System.Nullable<int> value);
        partial void OnLockerIdChanged();
        #endregion

        public Student()
        {
            this._Locker  = default(EntityRef<Locker>);
            this._EnrollmentOfficer  = default(EntityRef<EnrollmentOfficer>);
            this._Graduated  = default(EntityRef<Graduated>);
            this._DropInfo  = default(EntityRef<DropInfo>);
            this._StudentSchedules = new EntitySet<StudentSchedule>(new Action<StudentSchedule>(this.attach_StudentSchedules), new Action<StudentSchedule>(this.detach_StudentSchedules));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Name = @"last_name", Storage = "_LastName", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Name = @"first_name", Storage = "_FirstName", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"start_date", Storage = "_StartDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Name = @"end_date", Storage = "_EndDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HomePhone in the schema.
        /// </summary>
        [Column(Name = @"home_phone", Storage = "_HomePhone", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string HomePhone
        {
            get
            {
                return this._HomePhone;
            }
            set
            {
                if (this._HomePhone != value)
                {
                    this.OnHomePhoneChanging(value);
                    this.SendPropertyChanging();
                    this._HomePhone = value;
                    this.SendPropertyChanged("HomePhone");
                    this.OnHomePhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BussinessPhone in the schema.
        /// </summary>
        [Column(Name = @"bussiness_phone", Storage = "_BussinessPhone", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BussinessPhone
        {
            get
            {
                return this._BussinessPhone;
            }
            set
            {
                if (this._BussinessPhone != value)
                {
                    this.OnBussinessPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._BussinessPhone = value;
                    this.SendPropertyChanged("BussinessPhone");
                    this.OnBussinessPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CellPhone in the schema.
        /// </summary>
        [Column(Name = @"cell_phone", Storage = "_CellPhone", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CellPhone
        {
            get
            {
                return this._CellPhone;
            }
            set
            {
                if (this._CellPhone != value)
                {
                    this.OnCellPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._CellPhone = value;
                    this.SendPropertyChanged("CellPhone");
                    this.OnCellPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FaxNumber in the schema.
        /// </summary>
        [Column(Name = @"fax_number", Storage = "_FaxNumber", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FaxNumber
        {
            get
            {
                return this._FaxNumber;
            }
            set
            {
                if (this._FaxNumber != value)
                {
                    this.OnFaxNumberChanging(value);
                    this.SendPropertyChanging();
                    this._FaxNumber = value;
                    this.SendPropertyChanged("FaxNumber");
                    this.OnFaxNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"address", Storage = "_Address", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Name = @"city", Storage = "_City", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for State in the schema.
        /// </summary>
        [Column(Name = @"state", Storage = "_State", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ZIP in the schema.
        /// </summary>
        [Column(Storage = "_ZIP", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ZIP
        {
            get
            {
                return this._ZIP;
            }
            set
            {
                if (this._ZIP != value)
                {
                    this.OnZIPChanging(value);
                    this.SendPropertyChanging();
                    this._ZIP = value;
                    this.SendPropertyChanged("ZIP");
                    this.OnZIPChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Name = @"country", Storage = "_Country", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging();
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditTrans in the schema.
        /// </summary>
        [Column(Name = @"credit_trans", Storage = "_CreditTrans", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CreditTrans
        {
            get
            {
                return this._CreditTrans;
            }
            set
            {
                if (this._CreditTrans != value)
                {
                    this.OnCreditTransChanging(value);
                    this.SendPropertyChanging();
                    this._CreditTrans = value;
                    this.SendPropertyChanged("CreditTrans");
                    this.OnCreditTransChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Refered in the schema.
        /// </summary>
        [Column(Name = @"refered", Storage = "_Refered", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Refered
        {
            get
            {
                return this._Refered;
            }
            set
            {
                if (this._Refered != value)
                {
                    this.OnReferedChanging(value);
                    this.SendPropertyChanging();
                    this._Refered = value;
                    this.SendPropertyChanged("Refered");
                    this.OnReferedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WebPage in the schema.
        /// </summary>
        [Column(Name = @"web_page", Storage = "_WebPage", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string WebPage
        {
            get
            {
                return this._WebPage;
            }
            set
            {
                if (this._WebPage != value)
                {
                    this.OnWebPageChanging(value);
                    this.SendPropertyChanging();
                    this._WebPage = value;
                    this.SendPropertyChanged("WebPage");
                    this.OnWebPageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Notes in the schema.
        /// </summary>
        [Column(Name = @"notes", Storage = "_Notes", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this.SendPropertyChanging();
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Attachment in the schema.
        /// </summary>
        [Column(Name = @"attachment", Storage = "_Attachment", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Attachment
        {
            get
            {
                return this._Attachment;
            }
            set
            {
                if (this._Attachment != value)
                {
                    this.OnAttachmentChanging(value);
                    this.SendPropertyChanging();
                    this._Attachment = value;
                    this.SendPropertyChanged("Attachment");
                    this.OnAttachmentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Location in the schema.
        /// </summary>
        [Column(Name = @"location", Storage = "_Location", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Location
        {
            get
            {
                return this._Location;
            }
            set
            {
                if (this._Location != value)
                {
                    this.OnLocationChanging(value);
                    this.SendPropertyChanging();
                    this._Location = value;
                    this.SendPropertyChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comments in the schema.
        /// </summary>
        [Column(Name = @"comments", Storage = "_Comments", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Comments
        {
            get
            {
                return this._Comments;
            }
            set
            {
                if (this._Comments != value)
                {
                    this.OnCommentsChanging(value);
                    this.SendPropertyChanging();
                    this._Comments = value;
                    this.SendPropertyChanged("Comments");
                    this.OnCommentsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmergencyContactName in the schema.
        /// </summary>
        [Column(Name = @"emergency_contact_name", Storage = "_EmergencyContactName", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string EmergencyContactName
        {
            get
            {
                return this._EmergencyContactName;
            }
            set
            {
                if (this._EmergencyContactName != value)
                {
                    this.OnEmergencyContactNameChanging(value);
                    this.SendPropertyChanging();
                    this._EmergencyContactName = value;
                    this.SendPropertyChanged("EmergencyContactName");
                    this.OnEmergencyContactNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmergencyContactPhone1 in the schema.
        /// </summary>
        [Column(Name = @"emergency_contact_phone1", Storage = "_EmergencyContactPhone1", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string EmergencyContactPhone1
        {
            get
            {
                return this._EmergencyContactPhone1;
            }
            set
            {
                if (this._EmergencyContactPhone1 != value)
                {
                    this.OnEmergencyContactPhone1Changing(value);
                    this.SendPropertyChanging();
                    this._EmergencyContactPhone1 = value;
                    this.SendPropertyChanged("EmergencyContactPhone1");
                    this.OnEmergencyContactPhone1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmergencyContactPhone2 in the schema.
        /// </summary>
        [Column(Name = @"emergency_contact_phone2", Storage = "_EmergencyContactPhone2", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string EmergencyContactPhone2
        {
            get
            {
                return this._EmergencyContactPhone2;
            }
            set
            {
                if (this._EmergencyContactPhone2 != value)
                {
                    this.OnEmergencyContactPhone2Changing(value);
                    this.SendPropertyChanging();
                    this._EmergencyContactPhone2 = value;
                    this.SendPropertyChanged("EmergencyContactPhone2");
                    this.OnEmergencyContactPhone2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmergencyContactPhone3 in the schema.
        /// </summary>
        [Column(Name = @"emergency_contact_phone3", Storage = "_EmergencyContactPhone3", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string EmergencyContactPhone3
        {
            get
            {
                return this._EmergencyContactPhone3;
            }
            set
            {
                if (this._EmergencyContactPhone3 != value)
                {
                    this.OnEmergencyContactPhone3Changing(value);
                    this.SendPropertyChanging();
                    this._EmergencyContactPhone3 = value;
                    this.SendPropertyChanged("EmergencyContactPhone3");
                    this.OnEmergencyContactPhone3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cv in the schema.
        /// </summary>
        [Column(Name = @"cv", Storage = "_Cv", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cv
        {
            get
            {
                return this._Cv;
            }
            set
            {
                if (this._Cv != value)
                {
                    this.OnCvChanging(value);
                    this.SendPropertyChanging();
                    this._Cv = value;
                    this.SendPropertyChanged("Cv");
                    this.OnCvChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cvs in the schema.
        /// </summary>
        [Column(Name = @"cvs", Storage = "_Cvs", DbType = "BIT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Cvs
        {
            get
            {
                return this._Cvs;
            }
            set
            {
                if (this._Cvs != value)
                {
                    this.OnCvsChanging(value);
                    this.SendPropertyChanging();
                    this._Cvs = value;
                    this.SendPropertyChanged("Cvs");
                    this.OnCvsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MiddleInitial in the schema.
        /// </summary>
        [Column(Name = @"middle_initial", Storage = "_MiddleInitial", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MiddleInitial
        {
            get
            {
                return this._MiddleInitial;
            }
            set
            {
                if (this._MiddleInitial != value)
                {
                    this.OnMiddleInitialChanging(value);
                    this.SendPropertyChanging();
                    this._MiddleInitial = value;
                    this.SendPropertyChanged("MiddleInitial");
                    this.OnMiddleInitialChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Picture in the schema.
        /// </summary>
        [Column(Name = @"picture", Storage = "_Picture", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Picture
        {
            get
            {
                return this._Picture;
            }
            set
            {
                if (this._Picture != value)
                {
                    this.OnPictureChanging(value);
                    this.SendPropertyChanging();
                    this._Picture = value;
                    this.SendPropertyChanged("Picture");
                    this.OnPictureChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GraduatedId in the schema.
        /// </summary>
        [Column(Name = @"graduated_id", Storage = "_GraduatedId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> GraduatedId
        {
            get
            {
                return this._GraduatedId;
            }
            set
            {
                if (this._GraduatedId != value)
                {
                    if (this._Graduated.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGraduatedIdChanging(value);
                    this.SendPropertyChanging();
                    this._GraduatedId = value;
                    this.SendPropertyChanged("GraduatedId");
                    this.OnGraduatedIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentInfo in the schema.
        /// </summary>
        [Column(Name = @"payment_info", Storage = "_PaymentInfo", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentInfo
        {
            get
            {
                return this._PaymentInfo;
            }
            set
            {
                if (this._PaymentInfo != value)
                {
                    this.OnPaymentInfoChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentInfo = value;
                    this.SendPropertyChanged("PaymentInfo");
                    this.OnPaymentInfoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentPlanAmount in the schema.
        /// </summary>
        [Column(Name = @"payment_plan_amount", Storage = "_PaymentPlanAmount", DbType = "TEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PaymentPlanAmount
        {
            get
            {
                return this._PaymentPlanAmount;
            }
            set
            {
                if (this._PaymentPlanAmount != value)
                {
                    this.OnPaymentPlanAmountChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentPlanAmount = value;
                    this.SendPropertyChanged("PaymentPlanAmount");
                    this.OnPaymentPlanAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DropinfoId in the schema.
        /// </summary>
        [Column(Name = @"dropinfo_id", Storage = "_DropinfoId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DropinfoId
        {
            get
            {
                return this._DropinfoId;
            }
            set
            {
                if (this._DropinfoId != value)
                {
                    if (this._DropInfo.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDropinfoIdChanging(value);
                    this.SendPropertyChanging();
                    this._DropinfoId = value;
                    this.SendPropertyChanged("DropinfoId");
                    this.OnDropinfoIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EOId in the schema.
        /// </summary>
        [Column(Name = @"EO_id", Storage = "_EOId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> EOId
        {
            get
            {
                return this._EOId;
            }
            set
            {
                if (this._EOId != value)
                {
                    if (this._EnrollmentOfficer.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEOIdChanging(value);
                    this.SendPropertyChanging();
                    this._EOId = value;
                    this.SendPropertyChanged("EOId");
                    this.OnEOIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LockerId in the schema.
        /// </summary>
        [Column(Name = @"locker_id", Storage = "_LockerId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> LockerId
        {
            get
            {
                return this._LockerId;
            }
            set
            {
                if (this._LockerId != value)
                {
                    if (this._Locker.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLockerIdChanging(value);
                    this.SendPropertyChanging();
                    this._LockerId = value;
                    this.SendPropertyChanged("LockerId");
                    this.OnLockerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Locker in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Locker_Student", Storage="_Locker", ThisKey="LockerId", OtherKey="Id", IsForeignKey=true)]
        public Locker Locker
        {
            get
            {
                return this._Locker.Entity;
            }
            set
            {
                Locker previousValue = this._Locker.Entity;
                if ((previousValue != value) || (this._Locker.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Locker.Entity = null;
                        previousValue.Students.Remove(this);
                    }
                    this._Locker.Entity = value;
                    if (value != null)
                    {
                        this._LockerId = value.Id;
                        value.Students.Add(this);
                    }
                    else
                    {
                        this._LockerId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Locker");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnrollmentOfficer in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="EnrollmentOfficer_Student", Storage="_EnrollmentOfficer", ThisKey="EOId", OtherKey="Id", IsForeignKey=true)]
        public EnrollmentOfficer EnrollmentOfficer
        {
            get
            {
                return this._EnrollmentOfficer.Entity;
            }
            set
            {
                EnrollmentOfficer previousValue = this._EnrollmentOfficer.Entity;
                if ((previousValue != value) || (this._EnrollmentOfficer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._EnrollmentOfficer.Entity = null;
                        previousValue.Students.Remove(this);
                    }
                    this._EnrollmentOfficer.Entity = value;
                    if (value != null)
                    {
                        this._EOId = value.Id;
                        value.Students.Add(this);
                    }
                    else
                    {
                        this._EOId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("EnrollmentOfficer");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Graduated in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Graduated_Student", Storage="_Graduated", ThisKey="GraduatedId", OtherKey="Id", IsForeignKey=true)]
        public Graduated Graduated
        {
            get
            {
                return this._Graduated.Entity;
            }
            set
            {
                Graduated previousValue = this._Graduated.Entity;
                if ((previousValue != value) || (this._Graduated.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Graduated.Entity = null;
                        previousValue.Students.Remove(this);
                    }
                    this._Graduated.Entity = value;
                    if (value != null)
                    {
                        this._GraduatedId = value.Id;
                        value.Students.Add(this);
                    }
                    else
                    {
                        this._GraduatedId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Graduated");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DropInfo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DropInfo_Student", Storage="_DropInfo", ThisKey="DropinfoId", OtherKey="Id", IsForeignKey=true)]
        public DropInfo DropInfo
        {
            get
            {
                return this._DropInfo.Entity;
            }
            set
            {
                DropInfo previousValue = this._DropInfo.Entity;
                if ((previousValue != value) || (this._DropInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DropInfo.Entity = null;
                        previousValue.Students.Remove(this);
                    }
                    this._DropInfo.Entity = value;
                    if (value != null)
                    {
                        this._DropinfoId = value.Id;
                        value.Students.Add(this);
                    }
                    else
                    {
                        this._DropinfoId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("DropInfo");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StudentSchedules in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Student_StudentSchedule", Storage="_StudentSchedules", ThisKey="Id", OtherKey="StudentId", DeleteRule="RESTRICT")]
        public EntitySet<StudentSchedule> StudentSchedules
        {
            get
            {
                return this._StudentSchedules;
            }
            set
            {
                this._StudentSchedules.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_StudentSchedules(StudentSchedule entity)
        {
            this.SendPropertyChanging("StudentSchedules");
            entity.Student = this;
        }
    
        private void detach_StudentSchedules(StudentSchedule entity)
        {
            this.SendPropertyChanging("StudentSchedules");
            entity.Student = null;
        }
    }

}
