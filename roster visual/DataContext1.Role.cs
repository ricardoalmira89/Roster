//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 04/11/2014 14:25:19
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace roster_visual
{

    /// <summary>
    /// There are no comments for roster_visual.Role in the schema.
    /// </summary>
    [Table(Name = @"roster_mysql.role")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name1;

        private string _Access;
        #pragma warning restore 0649

        private EntitySet<User> _Users;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnName1Changing(string value);
        partial void OnName1Changed();
        partial void OnAccessChanging(string value);
        partial void OnAccessChanged();
        #endregion

        public Role()
        {
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name1 in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name1", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name1
        {
            get
            {
                return this._Name1;
            }
            set
            {
                if (this._Name1 != value)
                {
                    this.OnName1Changing(value);
                    this.SendPropertyChanging();
                    this._Name1 = value;
                    this.SendPropertyChanged("Name1");
                    this.OnName1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Access in the schema.
        /// </summary>
        [Column(Name = @"access", Storage = "_Access", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Access
        {
            get
            {
                return this._Access;
            }
            set
            {
                if (this._Access != value)
                {
                    this.OnAccessChanging(value);
                    this.SendPropertyChanging();
                    this._Access = value;
                    this.SendPropertyChanged("Access");
                    this.OnAccessChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Users", ThisKey="Id", OtherKey="RoleId", DeleteRule="RESTRICT")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = this;
        }
    
        private void detach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = null;
        }
    }

}
